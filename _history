{"entries":[{"timestamp":1742989137249,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_forever\" id=\"KyA2z_PW3e#TZvIdD1vy\" x=\"0"],[1,"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225"],[0,"\" y=\""],[1,"2"],[0,"0\"><"]],"start1":87,"start2":87,"length1":59,"length2":85}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"FaceTracking"],[1,"Ohne Titel"],[0,"\",\n "]],"start1":11,"start2":11,"length1":20,"length2":18},{"diffs":[[0,"re\":"],[-1," \"*\",\n        \"bluetooth\": \"*\",\n        \"v3\":"],[0," \"*\""]],"start1":84,"start2":84,"length1":53,"length2":8},{"diffs":[[0,"README.md\",\n"],[1,""],[0,"        \"cus"]],"start1":166,"start2":166,"length1":24,"length2":24},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":201,"start2":201,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchfÃ¼hren; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"}]}],"snapshots":[{"timestamp":1742989137248,"editorVersion":"7.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","custom.ts":"/**\n * Custom blocks for Face-Tracking Bluetooth data processing\n */\n//% color=\"#AA5585\" icon=\"\\uf294\"\nnamespace faceTracking {\n    let receivedString = \"\"\n    let x = 0\n    let y = 0\n    let z = 0\n    let yaw = 0\n    let pitch = 0\n    let roll = 0\n    let mouth = 0\n\n    // Default servo pins\n    let yawServoPin = AnalogPin.P0\n    let pitchServoPin = AnalogPin.P1\n\n    /**\n     * Set the pin for Yaw servo\n     * @param pin the analog pin to use for Yaw servo\n     */\n    //% block=\"Set Yaw Servo Pin to %pin\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.columns=4\n    //% pin.fieldOptions.tooltips=\"false\"\n    export function setYawServoPin(pin: AnalogPin) {\n        yawServoPin = pin\n    }\n\n    /**\n     * Set the pin for Pitch servo\n     * @param pin the analog pin to use for Pitch servo\n     */\n    //% block=\"Set Pitch Servo Pin to %pin\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.columns=4\n    //% pin.fieldOptions.tooltips=\"false\"\n    export function setPitchServoPin(pin: AnalogPin) {\n        pitchServoPin = pin\n    }\n\n    /**\n     * Handles actions when Bluetooth is connected\n     */\n    //% block=\"on Bluetooth Connected\"\n    //% draggable=true\n    export function onBluetoothConnected() {\n        basic.showIcon(IconNames.Happy)\n    }\n\n    /**\n     * Handles actions when Bluetooth is disconnected\n     */\n    //% block=\"on Bluetooth Disconnected\"\n    //% draggable=true\n    export function onBluetoothDisconnected() {\n        basic.showIcon(IconNames.No)\n    }\n\n    /**\n     * Starts Bluetooth UART Service\n     */\n    //% block=\"Start Bluetooth UART Service\"\n    //% draggable=true\n    export function startBluetoothService() {\n        basic.showIcon(IconNames.Square)\n        bluetooth.startUartService()\n        basic.showIcon(IconNames.SmallSquare)\n    }\n\n    /**\n     * Sets up UART data received handler\n     */\n    //% block=\"Setup UART Data Received\"\n    //% draggable=true\n    export function setupUartDataReceived() {\n        bluetooth.onUartDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n            receivedString = bluetooth.uartReadUntil(serial.delimiters(Delimiters.NewLine))\n            parseReceivedData()\n        })\n    }\n\n    /**\n     * Parses the received Bluetooth data\n     */\n    //% block=\"Parse Received Bluetooth Data\"\n    //% draggable=true\n    export function parseReceivedData() {\n        x = parseFloat(receivedString.substr(0, 2))\n        y = parseFloat(receivedString.substr(2, 2))\n        z = parseFloat(receivedString.substr(4, 2))\n        yaw = parseFloat(receivedString.substr(6, 2))\n        pitch = parseFloat(receivedString.substr(8, 2))\n        roll = parseFloat(receivedString.substr(10, 2))\n        mouth = parseFloat(receivedString.substr(12, 2))\n    }\n\n    /**\n     * Maps Yaw to Servo on selected Pin\n     */\n    //% block=\"Map Yaw to Servo\"\n    //% draggable=true\n    export function mapYawToServo() {\n        pins.servoWritePin(yawServoPin, Math.map(yaw, 0, 10, 180, 0))\n    }\n\n    /**\n     * Maps Pitch to Servo on selected Pin\n     */\n    //% block=\"Map Pitch to Servo\"\n    //% draggable=true\n    export function mapPitchToServo() {\n        pins.servoWritePin(pitchServoPin, Math.map(pitch, 10, 100, 0, 90))\n    }\n\n    /**\n     * Returns the X value\n     */\n    //% block=\"Get X Value\"\n    //% draggable=true\n    export function getX(): number {\n        return x\n    }\n\n    /**\n     * Returns the Y value\n     */\n    //% block=\"Get Y Value\"\n    //% draggable=true\n    export function getY(): number {\n        return y\n    }\n\n    /**\n     * Returns the Z value\n     */\n    //% block=\"Get Z Value\"\n    //% draggable=true\n    export function getZ(): number {\n        return z\n    }\n\n    /**\n     * Returns the Yaw value\n     */\n    //% block=\"Get Yaw Value\"\n    //% draggable=true\n    export function getYaw(): number {\n        return yaw\n    }\n\n    /**\n     * Returns the Pitch value\n     */\n    //% block=\"Get Pitch Value\"\n    //% draggable=true\n    export function getPitch(): number {\n        return pitch\n    }\n\n    /**\n     * Returns the Roll value\n     */\n    //% block=\"Get Roll Value\"\n    //% draggable=true\n    export function getRoll(): number {\n        return roll\n    }\n\n    /**\n     * Returns the Mouth value\n     */\n    //% block=\"Get Mouth Value\"\n    //% draggable=true\n    export function getMouth(): number {\n        return mouth\n    }\n}","pxt.json":"{\n    \"name\": \"Ohne Titel\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v7.0.3\",\n        \"tag\": \"v7.0.3\",\n        \"commits\": \"https://github.com/microsoft/pxt-calliope/commits/283622410ab91b26f46d68145d9ea311cb8e91dd\",\n        \"target\": \"7.0.3\",\n        \"pxt\": \"10.2.39\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[{"id":"26220-40348-75523-06529","timestamp":1742989206858}],"lastSaveTime":1742989248087}